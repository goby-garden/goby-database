export type SQLTableType = 'system' | 'class' | 'properties' | 'junction' | 'workspace';
export type SQLClassListRow = {
    id: number;
    name: string;
    metadata: string;
};
export type SQLJunctonListRow = {
    id: number;
    sides: string;
    metadata: string;
};
export type RelationshipSideBase = {
    class_id?: number;
    prop_id?: number;
    class_name?: string;
    prop_name?: string;
};
export type RelationshipSide = RelationshipSideBase & {
    class_id: number;
};
export type RelationTarget = {
    class_id: number;
    prop_id?: number | null;
    junction_id: number;
};
export type ItemRelationSide = {
    class_id: number;
    item_id: number;
    prop_id?: number;
};
type RelationCreate = {
    type: 'create';
    sides: [
        RelationshipSideBase,
        RelationshipSideBase
    ];
};
type RelationDelete = {
    type: 'delete';
    id: number;
};
type RelationTransfer = {
    type: 'transfer';
    id: number;
    sides: [
        RelationshipSide,
        RelationshipSide
    ];
    new_sides: [
        RelationshipSideBase,
        RelationshipSideBase
    ];
};
export type RelationEdit = RelationCreate | RelationDelete | RelationTransfer;
export type RelationEditValidSides = (RelationCreate & {
    sides: JunctionSides;
}) | (RelationTransfer & {
    sides: JunctionSides;
    new_sides: JunctionSides;
}) | RelationDelete;
type PropertyCreate = {
    type: 'create';
    prop_name: string;
    class_id?: number;
    class_name?: string;
    config: PropertyDefinition;
};
type PropertyDelete = {
    type: 'delete';
    class_id: number;
    prop_id: number;
};
type PropertyModify = {
    type: 'modify';
    prop_id: number;
    class_id: number;
    config: PropertyDefinition;
};
export type PropertyEdit = PropertyCreate | PropertyDelete | PropertyModify;
type ClassCreate = {
    type: 'create';
    class_name: string;
};
type ClassDelete = {
    type: 'delete';
    class_id: number;
};
type ClassModify = {
    type: 'modify_attribute';
    class_id: number;
    attribute: {
        name: string;
        value: any;
    };
};
export type ClassEdit = ClassCreate | ClassDelete | ClassModify;
export type ClassMetadata = {
    style: {
        color?: string;
    };
    label?: {
        properties: number[];
    };
};
export type PropertyType = 'data' | 'relation';
export type BinaryBoolean = 0 | 1;
export type MaxValues = number | null;
export type BaseProperty = {
    id: number;
    name: string;
    type: PropertyType;
    max_values: MaxValues;
};
export type RelationDefinition = {
    type: 'relation';
    relation_targets: RelationTarget[];
    data_type?: never;
};
export type RelationProperty = BaseProperty & RelationDefinition;
export type DataType = 'string' | 'resource' | 'number' | 'boolean';
export type DataDefinition = {
    type: 'data';
    data_type: DataType;
    relation_targets?: never;
};
export type DataProperty = BaseProperty & DataDefinition;
export type Property = RelationProperty | DataProperty;
export type PropertyDefinition = {
    max_values: MaxValues;
} & ({
    type: 'relation';
} | DataDefinition);
export type ClassRow = {
    [key: string]: any;
    system_id: number;
};
export type ClassData = {
    id: number;
    name: string;
    metadata: ClassMetadata;
    items: PaginatedItems;
    properties: Property[];
};
export type ClassList = ClassData[];
export type ItemPagination = {
    page_size?: number | null;
    page_range?: [start: number, end?: number];
    /** Filters props by ID. If not specified, pulls all. "slim" pulls the ID and label */
    property_range?: number[] | 'slim' | 'all';
    /** Filter by item IDs. If not specified, pulls all */
    item_range?: number[] | 'all';
};
export type PaginatedItems = ItemPagination & {
    loaded: ClassRow[];
    /** a count of all the items in the class, not just those loaded */
    total: number;
};
export type JunctionSides = [RelationshipSide, RelationshipSide];
export type JunctionTable = {
    id: number;
    sides: JunctionSides;
    metadata: {};
};
export type JunctionList = JunctionTable[];
export type WindowType = 'home' | 'hopper' | 'workspace';
export type SQLApplicationWindow = {
    id: number;
    type: WindowType;
    open: BinaryBoolean;
    metadata: string;
};
export type ApplicationWindow = {
    id: number;
    type: WindowType;
    open: BinaryBoolean;
    metadata: {
        pos: [null, null] | [number, number];
        size: [number, number];
    };
};
export type ThingType = 'item' | 'class';
export type BaseWorkspaceBlock = {
    /** this is the ID of the display element in the workspace, generated by the workspace table */
    block_id: number;
    type: ThingType;
    /** this is the ID of the class, item, or other “thing” represented in the data */
    thing_id: number;
};
export type SQLWorkspaceBlockRow = BaseWorkspaceBlock & {
    metadata: string;
};
export type WorkspaceBlock = BaseWorkspaceBlock & {
    metadata: {};
};
export {};
